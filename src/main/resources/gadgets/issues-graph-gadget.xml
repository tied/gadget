<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="__MSG_gadget.user.title__"
title_url="__MSG_gadget.user.title.url__"
description="__MSG_gadget.user.description__"
author="Anders Vrethem"
author_email="avrethem@gmail.com"
screenshot='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "screenshot.png")'
thumbnail='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "thumbnail.png")'
height="150"
>
<!--                            groupID.artifactID:gadget-key                                         -->
<Optional feature="gadget-directory">
<Param name="categories">
JIRA
Other
</Param>
</Optional>
<Require feature="oauthpopup" />
<Require feature="dynamic-height"/>
<Require feature="setprefs" />
<Require feature="settitle"/>
<Require feature="views" />
<Optional feature='auth-refresh' />
<Optional feature="atlassian.util" />

#oauth
#supportedLocales("gadget.common")
#supportLocales
<Locale messages="__ATLASSIAN_BASE_URL__/download/resources/com.avrethem.issues-metric/i18n/messages.xml"/>
</ModulePrefs>
<UserPref name="isConfigured" datatype="hidden" default_value="false"/>
<UserPref name="refresh" datatype="hidden" default_value="false"/>
<UserPref name="timeUnitsBox" datatype="hidden" default_value="30"/>
<UserPref name="timeUnit" datatype="hidden" default_value="d"/>
<UserPref name="isCumulative" datatype="hidden" default_value="false"/>
<UserPref name="filterId" datatype="hidden" />

<Content type="html" view="profile,canvas">
<![CDATA[
#requireResource("com.atlassian.gadgets.publisher:ajs-gadgets")
#requireResource("com.atlassian.jira.gadgets:jira-global")
#requireResource("com.atlassian.jira.gadgets:autocomplete")
#requireResource("com.atlassian.jira.gadgets:common")
#requireResource("com.avrethem.issues-metric:issues-metric-resources")
#includeResources()


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
console.log("Load Google chart");
google.charts.load('current', {'packages':['corechart']});


(function () {
  var gadget = AJS.Gadget({
      baseUrl: "__ATLASSIAN_BASE_URL__",
      useOauth: "/rest/gadget/1.0/currentUser",
      config: {
        descriptor: function (args) {
            var gadget = this;
            //console.log(args.fav); //Sucessfully loaded favourite filters
            gadgets.window.setTitle("Issue graph plugins");
            var filterPicker = AJS.gadget.fields.filterPicker(gadget, "filterId");
            return  {
                fields: [
                filterPicker,
                {
                    userpref: "timeUnit",
                    label: gadget.getMsg("timeUnit.label"),
                    description:gadget.getMsg("timeUnit.description"),
                    type: "select",
                    selected: gadget.getMsg("timeUnit.startVal"),
                    options:[
                    {
                        label:"Day",
                        value:"d"
                    },
                    {
                        label:"Week",
                        value:"w"
                    },
                    {
                        label:"Month",
                        value:"m"
                    },
                    {
                        label:"Year",
                        value:"y"
                    }
                    ]
                },
                {
                    userpref: "timeUnitsBox",
                    label: gadget.getMsg("timeUnitsBox.label"),
                    description:gadget.getMsg("timeUnitsBox.description"),
                    type: "text",
                    value: gadget.getMsg("timeUnitsBox.startVal")
                },
                {
                    userpref: "isCumulative",
                    label: gadget.getMsg("isCumulative.label"),
                    description: gadget.getMsg("isCumulative.description"),
                    type: "select",
                    selected: gadget.getMsg("isCumulative.startVal"),
                    options:[
                    {
                        label: "True",
                        value: "true"
                    },
                    {
                        label: "False",
                        value: "false"
                    }
                    ]
                },
                AJS.gadget.fields.nowConfigured()
                ]
            };
        }
}, // End config
view: {
    enableReload: true,
    onResizeAdjustHeight: true,
    template: function(args) {
            // Start template >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            var gadget = this;
            // Java JQL-search rest resource testing 
            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(args.dataset)

            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

            // End Java JQL-search
                    gadget.getView().empty(); // Reset view

                    var filter = gadget.getPref("filterId").split("filter-")[1];
                    console.log("Found filter by Id: " + filter);


                 // get filter searchURL and extract JQL-search param from filter
                 var viewURL = "";
                 AJS.$.ajax({
                    url: "/rest/api/2/filter/" + filter,
                    type: 'get',
                    contentType: "application/json",
                    dataType: "json",
                    async: false,
                    success: function(data) { viewURL = data["searchUrl"]; console.log(data); }
                });
                 var jql = viewURL.split("search?jql=")[1];
                 console.log("jql search: " + jql);


                 function drawChart() {
                    var rows = gadget.getPref("timeUnitsBox");
                    var data = new google.visualization.DataTable();
                    data.addColumn('datetime', 'Date');
                    data.addColumn('number', 'Closed');
                    data.addColumn('number', 'Open');


                      var time_period = "d"; // d == day, w == week, y == year


                      for (var i=rows; i >= 0; i--)
                      {
                        // Get current date, skip weekends
                        var date = new Date();
                        if ( gadget.getPref("timeUnit") == "d" && (Math.abs(date.getDay() -i) == 6 || Math.abs(date.getDay() -i) == 0) )
                            continue;
                        else if ( gadget.getPref("timeUnit") == "d" )
                            date.setDate(date.getDate() - i);
                        else if ( gadget.getPref("timeUnit") == "w" )
                            date.setDate(date.getDate() - i*7);
                        else if ( gadget.getPref("timeUnit") == "m" )
                            date.setMonth(date.getMonth() - i);
                        else
                            date.setYear(date.getYear() - i);

                        var closed = 0;
                        var open = 0;
                        var opened_url = "/rest/api/2/search?jql=" + jql;
                        var closed_url = "/rest/api/2/search?jql=" + jql;
                        if (! jql.includes("duedate")) {
                        //                    (      Issue > startDate                  )                                                   +                              (             Issue < iterationDate            )
                        opened_url += "%20AND%20createdDate%20>%3D%20startOfDay(-"   +rows.toString() + gadget.getPref("timeUnit")+")"  +  "%20AND%20createdDate%20<%3D%20startOfDay(-"   +i.toString()+gadget.getPref("timeUnit")+")";
                        closed_url += "%20AND%20resolutiondate%20>%3D%20startOfDay(-"+rows.toString() + gadget.getPref("timeUnit")+")"  +  "%20AND%20resolutiondate%20<%3D%20startOfDay(-"+i.toString()+gadget.getPref("timeUnit")+")";
                    }

                        //console.log(opened_url);
                        //console.log(closed_url);
                        AJS.$.ajax({
                            url: opened_url + "&maxResults=0", // Reduce max results
                            type: 'get',
                            contentType: "application/json",
                            dataType: "json",
                            async: false,
                            success: function(data) { open = data["total"];  }
                        });

                        AJS.$.ajax({
                            url: closed_url + "&maxResults=0", // Reduce max results
                            type: 'get',
                            contentType: "application/json",
                            dataType: "json",
                            async: false,
                            success: function(data) { closed = data["total"]; }
                        });

                        if ( gadget.getPref("isCumulative") == "false")
                            open -= closed;

                        //console.log("Add row:[" +date.getDate() + " | Closed: " + closed + " | Open :" + open + " ]");
                        data.addRow([date, closed, open ]);
                    }


                    var options = {
                      title: 'Open vs Closed issues',
                      curveType: 'none',
                      legend: { position: 'bottom' },
                      lineWidth: 4,
                      hAxis: {
                        title: 'Time',
                    },
                    vAxis: {
                      title: 'Issues'
                  },
              };

              var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

              chart.draw(data, options);
          } // End drawChart()

                    gadget.getView().append("<div id='chart_div' align='center' style='width: 98%; height: 99%'/>"); // Append element to doc, 'curve_chart' set in reports-plugin.js
                    console.log("Call to drawChart()");
                    google.charts.setOnLoadCallback(drawChart);
                    console.log("Completed view statements")

                //}


                },// End template <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                args: [{
                   key: "favFilters",
                   ajaxOptions: function() {
                       return {
                        contentType: 'application/json',
                        url: "/rest/gadget/1.0/filtersAndProjects?showProjects=false" // /rest/gadget/1.0/filtersAndProjects?showProjects=false
                    };
                },
                key: "dataset",
                ajaxOptions: function() {
                    return {
                        contentType: 'application/json',
                        url: "__ATLASSIAN_BASE_URL__/rest/datagenerator/1.0/message/getDatasetFromQuery",
                        data: {
                            filterId : gadgets.util.unescapeString(this.getPref("filterId")),
                            timePeriod : gadgets.util.unescapeString(this.getPref("timeUnitsBox") + this.getPref("timeUnit"))
                        }
                    }
                }
            }] // End args
        } // End view
    }); // End gadget
})(); // End function
</script>
]]>
</Content>
</Module>
