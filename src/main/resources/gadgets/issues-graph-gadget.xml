<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="__MSG_gadget.user.title__"
title_url="__MSG_gadget.user.title.url__"
description="__MSG_gadget.user.description__"
author="Anders Vrethem"
author_email="avrethem@gmail.com"
screenshot='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "screenshot.png")'
thumbnail='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "thumbnail.png")'
height="150"
>
<!--                            groupID.artifactID:gadget-key                                         -->
<Optional feature="gadget-directory">
<Param name="categories">
JIRA
Other
</Param>
</Optional>
<Require feature="oauthpopup" />
<Require feature="dynamic-height"/>
<Require feature="setprefs" />
<Require feature="settitle"/>
<Require feature="views" />
<Optional feature='auth-refresh' />
<Optional feature="atlassian.util" />

#oauth
#supportedLocales("gadget.common")
#supportLocales
<Locale messages="__ATLASSIAN_BASE_URL__/download/resources/com.avrethem.issues-metric/i18n/messages.xml"/>
</ModulePrefs>
<UserPref name="isConfigured" datatype="hidden" default_value="false"/>
<UserPref name="refresh" datatype="hidden" default_value="false"/>
<UserPref name="timeUnitsBox" datatype="hidden" default_value="30"/>
<UserPref name="timeUnit" datatype="hidden" default_value="d"/>
<UserPref name="isCumulative" datatype="hidden" default_value="false"/>
<UserPref name="filterId" datatype="hidden" />

<Content type="html" view="profile,canvas">
<![CDATA[
#requireResource("com.atlassian.gadgets.publisher:ajs-gadgets")
#requireResource("com.atlassian.jira.gadgets:jira-global")
#requireResource("com.atlassian.jira.gadgets:autocomplete")
#requireResource("com.atlassian.jira.gadgets:common")
#requireResource("com.avrethem.issues-metric:issues-metric-resources")
#includeResources()


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
console.log("Load Google chart");
google.charts.load('current', {'packages':['corechart']});


(function () {
  var gadget = AJS.Gadget({
      baseUrl: "__ATLASSIAN_BASE_URL__",
      useOauth: "/rest/gadget/1.0/currentUser",
      config: {
        descriptor: function (args) {
            var gadget = this;
            //console.log(args.fav); //Sucessfully loaded favourite filters
            gadgets.window.setTitle("Issue graph plugins");
            var filterPicker = AJS.gadget.fields.filterPicker(gadget, "filterId");
            return  {
                fields: [
                filterPicker,
                {
                    userpref: "timeUnit",
                    label: gadget.getMsg("timeUnit.label"),
                    description:gadget.getMsg("timeUnit.description"),
                    type: "select",
                    selected: gadget.getMsg("timeUnit.startVal"),
                    options:[
                    {
                        label:"Day",
                        value:"d"
                    },
                    {
                        label:"Week",
                        value:"w"
                    },
                    {
                        label:"Month",
                        value:"m"
                    },
                    {
                        label:"Year",
                        value:"y"
                    }
                    ]
                },
                {
                    userpref: "timeUnitsBox",
                    label: gadget.getMsg("timeUnitsBox.label"),
                    description:gadget.getMsg("timeUnitsBox.description"),
                    type: "text",
                    value: gadget.getMsg("timeUnitsBox.startVal")
                },
                {
                    userpref: "isCumulative",
                    label: gadget.getMsg("isCumulative.label"),
                    description: gadget.getMsg("isCumulative.description"),
                    type: "select",
                    selected: gadget.getMsg("isCumulative.startVal"),
                    options:[
                    {
                        label: "True",
                        value: "true"
                    },
                    {
                        label: "False",
                        value: "false"
                    }
                    ]
                },
                AJS.gadget.fields.nowConfigured()
                ]
            };
        }
}, // End config
view: {
    enableReload: true,
    onResizeAdjustHeight: true,
    template: function(args) {
            // Start template >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            var gadget = this;
            // Java JQL-search rest resource testing 
            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(args.dataset)

            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

            // End Java JQL-search
                    gadget.getView().empty(); // Reset view

                    var filter = gadget.getPref("filterId").split("filter-")[1];
                    console.log("Found filter by Id: " + filter);

                    // Prepares dataset and draws it to chart
                 function drawChart() {
                    var rows = gadget.getPref("timeUnitsBox");
                    // Format settings for data rows in chart
                    var data = new google.visualization.DataTable();
                    data.addColumn('date', 'Date');
                    data.addColumn('number', 'Closed');
                    data.addColumn('number', 'Open');

                    
                    // Info on Date() https://docs.microsoft.com/en-us/scripting/javascript/reference/date-object-javascript
                    var lastDate = new Date();
                    var date = lastDate;
                    console.log("Today is : " + lastDate.toISOString().substr(0, 19).replace('T', ' '));

                    // Turn back time in date
                    if ( gadget.getPref("timeUnit") == "d" )
                        date.setDate(date.getDate() - gadget.getPref("timeUnitsBox"));
                    else if ( gadget.getPref("timeUnit") == "w" )
                        date.setDate(date.getDate() - gadget.getPref("timeUnitsBox")*7);
                    else if ( gadget.getPref("timeUnit") == "m" )
                        date.setMonth(date.getMonth() - gadget.getPref("timeUnitsBox"));
                    else
                        date.setYear(date.getYear() - gadget.getPref("timeUnitsBox"));
                    
                    // Get the date where iteration should start
                    var firstDate =  new Date(date.getFullYear(), date.getMonth(), date.getDate()+1);

                    var stupidDateFormat = new Date(date.getFullYear(), date.getMonth(), date.getDate()+1);
                    console.log("First date is : " + stupidDateFormat.toISOString().substr(0, 19).replace('T', ' '));
                    // get Json object array from args [{...}] that pulls it from GET-request 
                    var jsonArray = args.dataset["issues"];

                    var open = 0;
                    var closed = 0;
                    // Loop backwards to get issue-dates in ascending order
                    for ( var i=(jsonArray["length"] - 1); i >= 0; i--) {
                        console.log("---------------Add Issue to graph----------------");

                        // Issues will be sorted in ascending order 
                        // Loop until date == createdDate for next issue in jsonArray
                        // Compare String, no need to parse to a date? Date.parse("2018-10-15") 
                        while ( date.toISOString().substr(0, 10).replace('T', ' ') < 
                                jsonArray[i].created.toString().split(" ")[0]   ) 
                        { 
                            if ( date.getDay() == 6 || date.getDay() == 0 ) // 6 is saturday, 0 is monday 
                            {
                                date.setDate(date.getDate() +1 );
                                continue; // Skip weekdays
                            }
                            console.log("Add timeLine point: " + date.toISOString().substr(0, 10).replace('T', ' '));

                            //Add a row and prepare next iteration
                            stupidDateFormat = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                            data.addRow([stupidDateFormat, closed, (gadget.getPref("isCumulative") == "false") ? open - closed : open ]);
                            //data.addRow([stupidDateFormat, closed, open ]);
                            date.setDate(date.getDate() +1 );
                        }

                        if ( jsonArray[i].created.toString().split(" ")[0] == date.toISOString().substr(0, 10).replace('T', ' ') )
                            open++;
                        if ( jsonArray[i].resolutionDate.toString().split(" ")[0] == date.toISOString().substr(0, 10).replace('T', ' ') )
                            closed++;

                        // DateFormat is a mess, stupidDateFormat works in googleLine...          
                        stupidDateFormat = new Date(date.getFullYear(), date.getMonth(), date.getDate()+1);

                        console.log("created: " + jsonArray[i].created.toString().split(" ")[0]);
                        console.log("resolvedDate: " + jsonArray[i].resolutionDate.toString().split(" ")[0]);
                        console.log("Current date: " + date.toISOString().substr(0, 19).replace('T', ' '));//.split(" ")[0]);           
                        console.log("Add row:[" + stupidDateFormat.toISOString().substr(0, 19).replace('T', ' ') + " | Closed: " + closed + " | Open :" + open + " ]");
                        console.log("-------------------------------------------------");    
                    }
                    //data.addRow([stupidDateFormat, closed, (gadget.getPref("isCumulative") == "false") ? open - closed : open ]);
                    data.addRow([stupidDateFormat, closed, (gadget.getPref("isCumulative") == "false") ? open - closed : open ]);


                    

                    console.log("First date to record: " + firstDate.toISOString().substr(0, 19).replace('T', ' '));
                    console.log("Last date to record: " + new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()+1).toISOString().substr(0, 19).replace('T', ' '));
                    
                    var options = {
                      title: 'Open vs Closed issues',
                      curveType: 'none',
                      legend: { position: 'bottom' },
                      lineWidth: 4,
                      hAxis: {
                        viewWindow: {
                            min: new Date(firstDate.getFullYear(), (firstDate.getMonth()), firstDate.getDate()),
                            //min: new Date(2018,5,1),
                            
                            max: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()+1)
                            //max: new Date(2018,5,18) //new Date().getFullYear(), new Date().getMonth(), new Date().getDate())
                    
                        },
                        title: 'Time',
                        gridlines: {count: 15}
                    },
                    vAxis: {
                      title: 'Issues'
                  }
              };

              var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

              chart.draw(data, options);
          } // End drawChart()

                    gadget.getView().append("<div id='chart_div' align='center' style='width: 98%; height: 99%'/>"); // Append element to doc, 'curve_chart' set in reports-plugin.js
                    console.log("Call to drawChart()");
                    google.charts.setOnLoadCallback(drawChart);
                    console.log("Completed view statements")

                //}


                },// End template <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                args: [{
                 key: "favFilters",
                 ajaxOptions: function() {
                     return {
                        contentType: 'application/json',
                        url: "/rest/gadget/1.0/filtersAndProjects?showProjects=false" // /rest/gadget/1.0/filtersAndProjects?showProjects=false
                    };
                },
                key: "dataset",
                ajaxOptions: function() {
                    return {
                        contentType: 'application/json',
                        url: "__ATLASSIAN_BASE_URL__/rest/datagenerator/1.0/message/getDatasetFromQuery",
                        data: {
                            filterId : gadgets.util.unescapeString(this.getPref("filterId")),
                            timePeriod : gadgets.util.unescapeString(this.getPref("timeUnitsBox") + this.getPref("timeUnit"))
                        }
                    }
                }
            }] // End args
        } // End view
    }); // End gadget
})(); // End function
</script>
]]>
</Content>
</Module>
