<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="__MSG_gadget.user.title__"
title_url="__MSG_gadget.user.title.url__"
description="__MSG_gadget.user.description__"
author="Anders Vrethem"
author_email="avrethem@gmail.com"
screenshot='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "screenshot.png")'
thumbnail='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "thumbnail.png")'
height="150"
>
<!--                            groupID.artifactID:gadget-key                                         -->
<Optional feature="gadget-directory">
<Param name="categories">
JIRA
Other
</Param>
</Optional>
<Require feature="oauthpopup" />
<Require feature="dynamic-height"/>
<Require feature="setprefs" />
<Require feature="settitle"/>
<Require feature="views" />
<Optional feature='auth-refresh' />
<Optional feature="atlassian.util" />

#oauth
#supportedLocales("gadget.common")
#supportLocales
<Locale messages="__ATLASSIAN_BASE_URL__/download/resources/com.avrethem.issues-metric/i18n/messages.xml"/>
</ModulePrefs>
<UserPref name="isConfigured" datatype="hidden" default_value="false"/>
<UserPref name="refresh" datatype="hidden" default_value="false"/>
<UserPref name="timeUnitsBox" datatype="hidden" default_value="30"/>
<UserPref name="timeUnit" datatype="hidden" default_value="d"/>
<UserPref name="isCumulative" datatype="hidden" default_value="true"/>
<UserPref name="filterId" datatype="hidden" />
<UserPref name="statusName" datatype="hidden" default_value="Done"/>
<UserPref name="statusSelected" datatype="hidden" default_value="Done" />
<Content type="html" view="profile,canvas">
<![CDATA[
#requireResource("com.atlassian.gadgets.publisher:ajs-gadgets")
#requireResource("com.atlassian.jira.gadgets:jira-global")
#requireResource("com.atlassian.jira.gadgets:autocomplete")
#requireResource("com.atlassian.jira.gadgets:common")
#requireResource("com.avrethem.issues-metric:issues-metric-resources")
#includeResources()


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
console.log("Load Google chart");
google.charts.load('current', {'packages':['corechart']});


/**
* Turn back time in parameter date. (use period)
*
* Set date backawards in time depending on param 'num' and gadget.getPref
* @param {Date}    date        Date to set
* @param {int}     num         Number of time units to set date backwards
* 
* @return {type} void
*/
function setDateBackwardsInTime(date, num, unit) {
    if ( unit == "d" )
        date.setDate(date.getDate() - num);
    else if ( unit == "w" )
        date.setDate(date.getDate() - num*7);
    else if ( unit == "M" )
        date.setMonth(date.getMonth() - num);
    else
        date.setYear(date.getFullYear() - num);
}

(function () {
  var gadget = AJS.Gadget({
      baseUrl: "__ATLASSIAN_BASE_URL__",
      useOauth: "/rest/gadget/1.0/currentUser",
      config: {
        descriptor: function (args) {
            var gadget = this;

            gadgets.window.setTitle(gadget.getMsg("gadget.title"));
            var filterPicker = AJS.gadget.fields.filterPicker(gadget, "filterId");

            // Create JSON-object from args.statuses
            var text = '[ ';
            var jsonArray = args.statuses;
            for ( var i=(jsonArray["length"] - 1); i >= 0; i--) {
                text += '{ "label":"'+ jsonArray[i].name + '", "value":"' + jsonArray[i].name  + '"},';
            }
            text = text.substring(0, text.length - 1);
            text += ' ]';

            // Send UI to config tab, more info: https://developer.atlassian.com/server/framework/gadgets/field-definitions/        
            return  {
                fields: [
                filterPicker,
                {
                    userpref: "timeUnit",
                    label: gadget.getMsg("timeUnit.label"),
                    description:gadget.getMsg("timeUnit.description"),
                    type: "select",
                    selected: gadget.getPref("timeUnit"),
                    options:[
                    {
                        label:"Day",
                        value:"d"
                    },
                    {
                        label:"Week",
                        value:"w"
                    },
                    {
                        label:"Month",
                        value:"M"
                    },
                    {
                        label:"Year",
                        value:"y"
                    }
                    ]
                },
                {
                    userpref: "timeUnitsBox",
                    label: gadget.getMsg("timeUnitsBox.label"),
                    description:gadget.getMsg("timeUnitsBox.description"),
                    type: "text",
                    value: gadget.getPref("timeUnitsBox")
                },
                {
                    userpref: "isCumulative",
                    label: gadget.getMsg("isCumulative.label"),
                    description: gadget.getMsg("isCumulative.description"),
                    type: "select",
                    selected: gadget.getPref("isCumulative"),
                    options:[
                    {
                        label: "True",
                        value: "true"
                    },
                    {
                        label: "False",
                        value: "false"
                    }
                    ]
                },
                {
                    userpref: "statusName",
                    label: "Status:",
                    description: "Choose status",
                    type: "select",
                    selected: gadget.getPref("statusName"), 
                    options: JSON.parse(text)
                },
                AJS.gadget.fields.nowConfigured()
                ]
            };
        }, // arguments to descriptor: function(args) above
        args: [{
            key: "statuses",
            ajaxOptions: function() {
                return {
                    contentType: 'application/json',
                    url: "__ATLASSIAN_BASE_URL__/rest/api/latest/status"
                }
            }
            }] // End args
}, // End config
view: {
    enableReload: true,
    onResizeAdjustHeight: true,
            /**
             * Template function renders should render view or html
             *
             * Usage of parameter is: args.'key'
             *
             * @param {JSONArray}    args        A json filled with arguments from args[{...}] section
             * 
             * @return {type} void
             */
             template: function(args) {
                var gadget = this;

            //console.log("Chosen status by name: " + gadget.getPref("statusName"));
            console.log(args.dataset);

            gadget.getView().empty(); // Reset view

            // Filter comes in format 'filter-filterID'
            var filter = gadget.getPref("filterId").split("filter-")[1];
            //console.log("Found filter by Id: " + filter);

            

            
            /**
             * Prepares dataset and draws it
             *
             * Prepares dataset by adding rows, draws a Google line chart
             *
             *
             * @return {type} void
             */
             function drawChart() {
                var rows = gadget.getPref("timeUnitsBox");
                var data = new google.visualization.DataTable();
                data.addColumn('string', 'Date');                                                       // Format settings for data rows in chart
                data.addColumn('number', gadget.getPref("statusName"));
                data.addColumn('number', 'Open');

                var date = new Date();                                                                  // Info on Date() https://docs.microsoft.com/en-us/scripting/javascript/reference/date-object-javascript
                //console.log("Today is : " + lastDate.toISOString().substr(0, 19).replace('T', ' '));

                setDateBackwardsInTime(date, gadget.getPref("timeUnitsBox"), gadget.getPref("timeUnit"));
                var firstDate =  new Date(date.getFullYear(), date.getMonth(), date.getDate()+1);       // Get the date where iteration should start
                
                var jsonArray = args.dataset["issues"];                                             // get Json object array from args [{...}] that pulls it from GET-request 

                var open = 0;
                var closed = 0;
                // Loop in acsending dates
                var i = 0;
                while (  i < jsonArray["length"] ) 
                {
                    //console.log("---------------Add Issue to graph----------------");
                    // Issues will be sorted in ascending order 
                    // Loop until date == createdDate for next issue in jsonArray
                    // Compare String, no need to parse to a date? Date.parse("2018-10-15") 
                    while ( date.toISOString().substr(0, 10).replace('T', ' ') < 
                        jsonArray[i].issuedate.toString().split(" ")[0]   ) 
                    { 
                        if ( date.getDay() == 6 || date.getDay() == 0 && gadget.getPref("timeUnit") == "d") // Ship 6 == saturday and 0 == monday Only when day
                        {
                            date.setDate(date.getDate() +1 );
                            continue; 
                        }

                        /*console.log("issuedate: " + jsonArray[i].issuedate.toString().split(" ")[0]);
                        console.log("resolvedDate: " + jsonArray[i].resolutionDate.toString().split(" ")[0]);
                        console.log("Current date: " + date.toISOString().substr(0, 19).replace('T', ' '));//.split(" ")[0]);           
                        console.log("Add row:[" + stupidDateFormat.toISOString().substr(0, 19).replace('T', ' ') + " | Closed: " + closed + " | Open :" + open + " ]");
                        console.log("-------------------------------------------------");    */
                        data.addRow([date.toISOString().substr(0, 10), closed, (gadget.getPref("isCumulative") == "false") ? open - closed : open ]);

                        setDateBackwardsInTime(date, -1, gadget.getPref("timeUnit"));
                    }

                    if ( date.toISOString().substr(0, 10) >= jsonArray[i].issuedate.toString().split(" ")[0] )
                    {

                        open = parseInt(jsonArray[i].opened);
                        closed = parseInt(jsonArray[i].closed);
                    }
                    i++;
                }
                //console.log("Add Last row:[" + date.toISOString().substr(0, 19).replace('T', ' ') + " | Closed: " + closed + " | Open :" + open + " ]");
                data.addRow([date.toISOString().substr(0, 10), closed, (gadget.getPref("isCumulative") == "false") ? open - closed : open ]);


                // If date have not iterated to todays date
                var now = new Date();
                while ( date.toISOString().substr(0, 10) <= now.toISOString().substr(0, 10) )
                {
                    if ( date.getDay() == 6 || date.getDay() == 0 && gadget.getPref("timeUnit") == "d") // Ship 6 == saturday and 0 == monday Only when day
                    {
                        date.setDate(date.getDate() +1 );
                        continue; 
                    }

                        //stupidDateFormat = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                        data.addRow([date.toISOString().substr(0, 10), closed, (gadget.getPref("isCumulative") == "false") ? open - closed : open ]);

                        setDateBackwardsInTime(date, -1, gadget.getPref("timeUnit"));
                    }

                //console.log("First date to record: " + firstDate.toISOString().substr(0, 19).replace('T', ' '));
                //console.log("Last date to record: " + new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()+1).toISOString().substr(0, 19).replace('T', ' '));

                var options = {
                  title: 'Open vs ' + gadget.getPref("statusName") + ' issues',
                  curveType: 'none',
                  legend: { position: 'bottom' },
                  lineWidth: 4,
                  hAxis: {
                    viewWindow: {
                        min: new Date(firstDate.getFullYear(), (firstDate.getMonth()), firstDate.getDate()),
                        max: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()+1)
                    },
                    //title: 'Time',
                    gridlines: {count: 15}
                },
                vAxis: {
                  //title: 'Issues'
              }
          };

          var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
          chart.draw(data, options);
            } // End drawChart()

            gadget.getView().append("<div id='chart_div' align='center' style='width: 98%; height: 99%'/>");    // Append element with id of 'curve_chart' 
            google.charts.setOnLoadCallback(drawChart);
            console.log("IssueLinePlotter 2D loaded");

            },// End template function
            args: [{
                key: "dataset",
                ajaxOptions: function() {
                    var d = new Date();
                    setDateBackwardsInTime(d, this.getPref("timeUnitsBox"), this.getPref("timeUnit"));
                    return {
                        contentType: 'application/json',
                        url: "__ATLASSIAN_BASE_URL__/rest/datagenerator/1.0/message/getDatesetByStatusAndByDate",
                        data: {
                            filterId : gadgets.util.unescapeString(this.getPref("filterId")),
                            timePeriod : gadgets.util.unescapeString(this.getPref("timeUnitsBox") + this.getPref("timeUnit")),
                            firstDate : gadgets.util.unescapeString(d.toISOString().substr(0, 10)),
                            statusByName: gadgets.util.unescapeString(this.getPref("statusName"))
                        }
                    };
                }
                }] // End args
        } // End view
    }); // End gadget
})(); // End function
</script>
]]>
</Content>
</Module>
