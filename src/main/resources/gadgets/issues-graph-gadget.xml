<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="__MSG_gadget.user.title__"
title_url="__MSG_gadget.user.title.url__"
description="__MSG_gadget.user.description__"
author="Anders Vrethem"
author_email="avrethem@gmail.com"
screenshot='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "screenshot.png")'
thumbnail='#staticResourceUrl("com.avrethem.issues-metric:issues-metric-gadget", "thumbnail.png")'
height="150"
>
<!--                            groupID.artifactID:gadget-key                                         -->
<Optional feature="gadget-directory">
<Param name="categories">
JIRA
Other
</Param>
</Optional>
<Require feature="oauthpopup" />
<Require feature="dynamic-height"/>
<Require feature="setprefs" />
<Require feature="settitle"/> <!-- Required to use 'gadgets.window' -->
<Require feature="views" />
<Optional feature='auth-refresh' />
<Optional feature="atlassian.util" />

#oauth <!-- For authentication -->
#supportedLocales("gadget.common")
#supportLocales
<Locale messages="__ATLASSIAN_BASE_URL__/download/resources/com.avrethem.issues-metric/i18n/messages.xml"/>
</ModulePrefs>
<UserPref name="isConfigured" datatype="hidden" default_value="false"/>
<UserPref name="refresh" datatype="hidden" default_value="false"/>
<UserPref name="timeUnitsBox" datatype="hidden" default_value="30"/>
<UserPref name="timeUnit" datatype="hidden" default_value="d"/>
<UserPref name="filterId" datatype="hidden" />
<UserPref name="statusName" datatype="hidden"/>
<UserPref name="countFromZero" datatype="hidden" default_value="false"/>
<Content type="html" view="profile,canvas"> <!-- HTML, canvas is needed for 'resizing' button  -->
<![CDATA[
#requireResource("com.atlassian.gadgets.publisher:ajs-gadgets")
#requireResource("com.atlassian.jira.gadgets:jira-global")
#requireResource("com.atlassian.jira.gadgets:autocomplete")
#requireResource("com.atlassian.jira.gadgets:common")
#requireResource("com.avrethem.issues-metric:issues-metric-resources")
#includeResources()


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
console.log("Load Google chart");
google.charts.load('current', {'packages':['corechart']});




(function () {
  var gadget = AJS.Gadget({
      baseUrl: "__ATLASSIAN_BASE_URL__",
      useOauth: "/rest/gadget/1.0/currentUser",
      config: {
        descriptor: function (args) {
            var gadget = this;

            gadgets.window.setTitle(gadget.getMsg("gadget.title"));
            var filterPicker = AJS.gadget.fields.filterPicker(gadget, "filterId");

            // Create JSON-object from args.statuses
            var text = '[ ';
            var jsonArray = args.statuses;
            for ( var i=(jsonArray["length"] - 1); i >= 0; i--) {
                text += '{ "label":"'+ jsonArray[i].name + '", "value":"' + jsonArray[i].name  + '"},';
            }
            text = text.substring(0, text.length - 1);
            text += ' ]';

            // Send UI to config tab, more info: https://developer.atlassian.com/server/framework/gadgets/field-definitions/        
            return  {
                fields: [
                filterPicker,
                {
                    userpref: "timeUnit",
                    label: gadget.getMsg("timeUnit.label"),
                    description:gadget.getMsg("timeUnit.description"),
                    type: "select",
                    selected: gadget.getPref("timeUnit"),
                    options:[
                    {
                        label:"Day",
                        value:"d"
                    },
                    {
                        label:"Week",
                        value:"w"
                    },
                    {
                        label:"Month",
                        value:"M"
                    },
                    {
                        label:"Year",
                        value:"y"
                    }
                    ]
                },
                {
                    userpref: "timeUnitsBox",
                    label: gadget.getMsg("timeUnitsBox.label"),
                    description:gadget.getMsg("timeUnitsBox.description"),
                    type: "text",
                    value: gadget.getPref("timeUnitsBox")
                },
                {
                    userpref: "countFromZero",
                    label: gadget.getMsg("countFromZero.label"),
                    description: gadget.getMsg("countFromZero.description"),
                    type: "select",
                    selected: gadget.getPref("countFromZero"),
                    options:[
                    {
                        label: "Start counting from zero",
                        value: "true"
                    },
                    {
                        label: "Count previous issues",
                        value: "false"
                    }
                    ]
                },
                {
                    userpref: "statusName",
                    label: "Status:",
                    description: "Choose status",
                    type: "select",
                    selected: gadget.getPref("statusName"), 
                    options: JSON.parse(text)
                },
                AJS.gadget.fields.nowConfigured()
                ]
            };
        }, // arguments to descriptor: function(args) above
        args: [{
            key: "statuses",
            ajaxOptions: function() {
                return {
                    contentType: 'application/json',
                    url: "__ATLASSIAN_BASE_URL__/rest/api/latest/status"
                }
            }
            }] // End args
}, // End config
view: {
    enableReload: true,
    onResizeAdjustHeight: true,
            /**
             * Template function renders should render view or html
             *
             * Usage of parameter is: args.'key'
             *
             * @param {JSONArray}    args        A json filled with arguments from args[{...}] section
             * 
             * @return {type} void
             */
             template: function(args) {
                var gadget = this;

            //console.log("Chosen status by name: " + gadget.getPref("statusName"));
            console.log(args.dataset);
            var jsonArray = args.dataset["issues"];                                             // get Json object array from args [{...}] that pulls it from GET-request 

            gadget.getView().empty(); // Reset view

            // Filter comes in format 'filter-filterID'
            var filter = gadget.getPref("filterId").split("filter-")[1];

            var minValueTMP = (jsonArray.length > 0) ? jsonArray[0].closed : 0;


            /**
             * Prepares dataset and draws it
             *
             * Prepares dataset by adding rows, draws a Google line chart
             *
             *
             * @return {type} void
             */
             function drawChart() {

                // Dataset for trendline chart
                var trendData = new google.visualization.DataTable();
                trendData.addColumn('string', 'Date');                                                      
                trendData.addColumn('number', 'Trend');
                

                //Dataset for Open vs Closed graph
                var chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Date');                                                       // Format settings for data rows in chart
                chartData.addColumn('number', 'Total');
                chartData.addColumn('number', gadget.getPref("statusName"));
                chartData.addColumn('number', (gadget.getPref("countFromZero") == "true") ? 'Created' : 'Open');

                var date = new Date(); 
                date.setTime( date.getTime() - new Date().getTimezoneOffset()*60*1000 );                  // Info on Date() https://docs.microsoft.com/en-us/scripting/javascript/reference/date-object-javascript

                setDateBackwardsInTime(date, gadget.getPref("timeUnitsBox"), gadget.getPref("timeUnit"));
                var firstDate =  new Date(date.getFullYear(), date.getMonth(), date.getDate());       // Get the date where iteration should start


                parseDataToChart({json: args.dataset["issues"], date: date, timeUnit: gadget.getPref("timeUnit"), countFromZero: gadget.getPref("countFromZero"), chartData: chartData, trendData: trendData});
                    


                    // Google line visual options
                    var chartOptions = {
                      title: (gadget.getPref("countFromZero") == "false") ? 'Open over ' + gadget.getPref("statusName") + ' issues' : 'Created VS ' + gadget.getPref("statusName") + ' issues' ,
                      isStacked: (gadget.getPref("countFromZero") == "true") ? false : true,
                      curveType: 'none',
                      focusTarget: (gadget.getPref("countFromZero") == "false") ? 'category' : 'datum',
                      seriesType: 'area',
                      series: {
                        0: {
                            type: 'line',
                            lineWidth: 0,
                            pointSize: 0,
                            visibleInLegend: false,
                            pointsVisible: false
                        },
                        1: { pointsVisible: true, color: '#8eb021'}, // set options for the Open
                        2: { pointsVisible: true, color: '#d04437'}  // set options for the Closed
                    },
                      legend: { position: 'bottom' },
                      lineWidth: 5,
                      hAxis: {
                        //title: 'Time'
                        gridlines: {count: -1},
                        viewWindow: {
                            min: new Date(firstDate.getFullYear(), (firstDate.getMonth()), firstDate.getDate()),
                            max: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate())
                        }
                    },
                    vAxis: {
                        //title: 'Issues',
                        viewWindow: {
                            min: (gadget.getPref("countFromZero") == false ) ? minValueTMP : 0,
                        },
                        format: '#',
                        gridlines: {count: -1}
                    }
                    
                    //chartArea:{ left:'5%',top:'2%',width:'90%',height:'90%'}

                };

                var trendLineOptions = {
                    curveType: 'none',
                    legend: { position: 'none' },
                    vAxis: {
                        format: '#',
                    },
                    hAxis: {
                        //title: 'Time'
                        gridlines: {count: -1},
                        viewWindow: {
                            min: new Date(firstDate.getFullYear(), (firstDate.getMonth()), firstDate.getDate()),
                            max: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate())
                        }
                    }
                    //chartArea:{ left:'5%',top:'2%',width:'90%',height:'900%'}
                }

                var chart = new google.visualization.ComboChart(document.getElementById('chart_div'));
                chart.draw(chartData, chartOptions);

                var trend = new  google.visualization.LineChart(document.getElementById('trend_chart_div')); 
                trend.draw(trendData, trendLineOptions);

            } // End drawChart()
            gadget.getView().append("<div>");
            gadget.getView().append("<div id='chart_div' height: 65%'/>");    // Append element with id of 'curve_chart' 
            gadget.getView().append("<div id='trend_chart_div' height: 34%'/>");
            gadget.getView().append("</div>");
            google.charts.setOnLoadCallback(drawChart);
            console.log("IssueLinePlotter 2D loaded");
            console.log("Coutn from zerO: " + gadget.getPref("countFromZero"));
            },// End template function
            args: [{
                key: "dataset",
                ajaxOptions: function() {
                    var d = new Date();
                    d.setTime( d.getTime() - new Date().getTimezoneOffset()*60*1000 );
                    setDateBackwardsInTime(d, this.getPref("timeUnitsBox"), this.getPref("timeUnit"));
                    return {
                        contentType: 'application/json',
                        url: "__ATLASSIAN_BASE_URL__/rest/datagenerator/1.0/message/getJSONdataset",
                        data: {
                            filterId : gadgets.util.unescapeString(this.getPref("filterId")),
                            timePeriod : gadgets.util.unescapeString(this.getPref("timeUnitsBox") + this.getPref("timeUnit")),
                            firstDate : gadgets.util.unescapeString(d.toISOString().substr(0, 16).replace('T', ' ')),
                            statusByName: gadgets.util.unescapeString(this.getPref("statusName"))
                        }
                    };
                }
                }] // End args
        } // End view
    }); // End gadget
})(); // End function
</script>
]]>
</Content>
</Module>
